/*

	This file is part of libnmesh.

	buffer.tml
	General purpose buffer

	Copyright (C) 2008, 2010 - 2012
	Papadopoulos Nikolaos

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 3 of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General
	Public License along with this program; if not, write to the
	Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
	Boston, MA 02110-1301 USA

*/

#ifndef NMESH_BUFFER_TML_INCLUDED
#define NMESH_BUFFER_TML_INCLUDED

#ifndef NMESH_BUFFER_HPP_INCLUDED
	#error "buffer.hpp must be included before buffer.tml"
#endif /* NMESH_BUFFER_HPP_INCLUDED */

#include <new>
#include <string.h>

namespace NMesh {

template <class T>
Buffer<T>::Buffer()
	: m_count(0),
	  m_data(NULL)
{}

template <class T>
Buffer<T>::Buffer(const Buffer &rhs)
{
	if (&rhs == this)
		return;

	release();
	
	if(init(rhs.count()))
		return;
	
	memcpy(m_data, rhs.m_data, m_count * sizeof(T));
	m_count = rhs.count();
}

template <class T>
Buffer<T> &Buffer<T>::operator =(const Buffer<T> &rhs)
{
	if (&rhs == this)
		return *this;

	release();
	
	m_data = NULL;

	if(init(rhs.count())) {
		return *this;
	}

	memcpy(m_data, rhs.m_data, m_count * sizeof(T));	
	m_count = rhs.count();

	return *this;
}

template <class T>
Buffer<T>::~Buffer()
{
	release();
}

template <class T>
int Buffer<T>::init(const unsigned int count)
{
	// Release previously allocated memory
	release();

	if (!count)
		return 0;

	// Allocate new memory
	m_data = new (std::nothrow) T[count];
	
	if(!m_data)
		return 1; // Something went wrong.

	memset(m_data, 0, count * sizeof(T));
	m_count = count;

	return 0;
}

template <class T>
void Buffer<T>::clear()
{
	release();
}

template <class T>
void Buffer<T>::release()
{
	/* 
		NOTES: 
		1. [ref: init(...)] The std::nothrow version
		   of the new operator returns NULL in case of 
		   failure. Therefore we do not risk memory
		   corruption with the following operations.

		2. delete NULL is perfectly valid according 
		   to the standard.
	*/
	delete[] m_data;

	m_data = NULL;
	m_count = 0;
}

template <class T>
unsigned int Buffer<T>::count() const
{
	return m_count;
}

template <class T>
T& Buffer<T>::operator[] (const unsigned int idx)
{
	if (!count()) {
		return m_single_object;
	}

	return m_data[idx >= count() ? count() - 1 : idx];
}

template <class T>
const T& Buffer<T>::operator[] (const unsigned int idx) const
{
	if (!count()) {
		return m_single_object;
	}

	return m_data[idx >= count() ? count() - 1 : idx];
}

} /* namespace NMesh */

#endif /* NMESH_BUFFER_TML_INCLUDED */
